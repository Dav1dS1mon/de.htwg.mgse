/*
 * generated by Xtext 2.11.0
 */
package org.xtext.de.htwg.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SetGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PACKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.de.htwg.Set.PACK");
		private final Assignment cPackAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackPACKTYPEParserRuleCall_0 = (RuleCall)cPackAssignment.eContents().get(0);
		
		//PACK:
		//	pack=PACKTYPE;
		@Override public ParserRule getRule() { return rule; }
		
		//pack=PACKTYPE
		public Assignment getPackAssignment() { return cPackAssignment; }
		
		//PACKTYPE
		public RuleCall getPackPACKTYPEParserRuleCall_0() { return cPackPACKTYPEParserRuleCall_0; }
	}
	public class PACKTYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.de.htwg.Set.PACKTYPE");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cFormsAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cFormsFORMSParserRuleCall_0_0 = (RuleCall)cFormsAssignment_0.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cUrlURLParserRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		
		//PACKTYPE:
		//	forms=FORMS & url=URL;
		@Override public ParserRule getRule() { return rule; }
		
		//forms=FORMS & url=URL
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//forms=FORMS
		public Assignment getFormsAssignment_0() { return cFormsAssignment_0; }
		
		//FORMS
		public RuleCall getFormsFORMSParserRuleCall_0_0() { return cFormsFORMSParserRuleCall_0_0; }
		
		//url=URL
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }
		
		//URL
		public RuleCall getUrlURLParserRuleCall_1_0() { return cUrlURLParserRuleCall_1_0; }
	}
	public class FORMSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.de.htwg.Set.FORMS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFORM_ORIGINALParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFORM_DOCTORWHOParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFORM_GAMEOFTHRONESParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FORMS:
		//	FORM_ORIGINAL | FORM_DOCTORWHO | FORM_GAMEOFTHRONES;
		@Override public ParserRule getRule() { return rule; }
		
		//FORM_ORIGINAL | FORM_DOCTORWHO | FORM_GAMEOFTHRONES
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FORM_ORIGINAL
		public RuleCall getFORM_ORIGINALParserRuleCall_0() { return cFORM_ORIGINALParserRuleCall_0; }
		
		//FORM_DOCTORWHO
		public RuleCall getFORM_DOCTORWHOParserRuleCall_1() { return cFORM_DOCTORWHOParserRuleCall_1; }
		
		//FORM_GAMEOFTHRONES
		public RuleCall getFORM_GAMEOFTHRONESParserRuleCall_2() { return cFORM_GAMEOFTHRONESParserRuleCall_2; }
	}
	public class FORM_GAMEOFTHRONESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.de.htwg.Set.FORM_GAMEOFTHRONES");
		private final Keyword cStarkLennisterTargaryenKeyword = (Keyword)rule.eContents().get(1);
		
		//FORM_GAMEOFTHRONES:
		//	"{ \"stark\", \"lennister\", \"targaryen\" };";
		@Override public ParserRule getRule() { return rule; }
		
		//"{ \"stark\", \"lennister\", \"targaryen\" };"
		public Keyword getStarkLennisterTargaryenKeyword() { return cStarkLennisterTargaryenKeyword; }
	}
	public class FORM_ORIGINALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.de.htwg.Set.FORM_ORIGINAL");
		private final Keyword cOvallyWaveBalkKeyword = (Keyword)rule.eContents().get(1);
		
		//FORM_ORIGINAL:
		//	"{ \"ovally\", \"wave\", \"balk\" };";
		@Override public ParserRule getRule() { return rule; }
		
		//"{ \"ovally\", \"wave\", \"balk\" };"
		public Keyword getOvallyWaveBalkKeyword() { return cOvallyWaveBalkKeyword; }
	}
	public class FORM_DOCTORWHOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.de.htwg.Set.FORM_DOCTORWHO");
		private final Keyword cTardisDalekCybermanKeyword = (Keyword)rule.eContents().get(1);
		
		//FORM_DOCTORWHO:
		//	"{ \"tardis\", \"dalek\", \"cyberman\" };";
		@Override public ParserRule getRule() { return rule; }
		
		//"{ \"tardis\", \"dalek\", \"cyberman\" };"
		public Keyword getTardisDalekCybermanKeyword() { return cTardisDalekCybermanKeyword; }
	}
	public class URLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.de.htwg.Set.URL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cURL_ORIGINALParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cURL_DOCTORWHOParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cURL_GAMEOFTHRONESParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//URL:
		//	URL_ORIGINAL | URL_DOCTORWHO | URL_GAMEOFTHRONES;
		@Override public ParserRule getRule() { return rule; }
		
		//URL_ORIGINAL | URL_DOCTORWHO | URL_GAMEOFTHRONES
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//URL_ORIGINAL
		public RuleCall getURL_ORIGINALParserRuleCall_0() { return cURL_ORIGINALParserRuleCall_0; }
		
		//URL_DOCTORWHO
		public RuleCall getURL_DOCTORWHOParserRuleCall_1() { return cURL_DOCTORWHOParserRuleCall_1; }
		
		//URL_GAMEOFTHRONES
		public RuleCall getURL_GAMEOFTHRONESParserRuleCall_2() { return cURL_GAMEOFTHRONESParserRuleCall_2; }
	}
	public class URL_GAMEOFTHRONESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.de.htwg.Set.URL_GAMEOFTHRONES");
		private final Keyword cPackGotKeyword = (Keyword)rule.eContents().get(1);
		
		//URL_GAMEOFTHRONES:
		//	"/pack/got/";
		@Override public ParserRule getRule() { return rule; }
		
		//"/pack/got/"
		public Keyword getPackGotKeyword() { return cPackGotKeyword; }
	}
	public class URL_DOCTORWHOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.de.htwg.Set.URL_DOCTORWHO");
		private final Keyword cPackDwKeyword = (Keyword)rule.eContents().get(1);
		
		//URL_DOCTORWHO:
		//	"/pack/dw/";
		@Override public ParserRule getRule() { return rule; }
		
		//"/pack/dw/"
		public Keyword getPackDwKeyword() { return cPackDwKeyword; }
	}
	public class URL_ORIGINALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.de.htwg.Set.URL_ORIGINAL");
		private final Keyword cPackOriginalKeyword = (Keyword)rule.eContents().get(1);
		
		//URL_ORIGINAL:
		//	"/pack/original/";
		@Override public ParserRule getRule() { return rule; }
		
		//"/pack/original/"
		public Keyword getPackOriginalKeyword() { return cPackOriginalKeyword; }
	}
	
	
	private final PACKElements pPACK;
	private final PACKTYPEElements pPACKTYPE;
	private final FORMSElements pFORMS;
	private final FORM_GAMEOFTHRONESElements pFORM_GAMEOFTHRONES;
	private final FORM_ORIGINALElements pFORM_ORIGINAL;
	private final FORM_DOCTORWHOElements pFORM_DOCTORWHO;
	private final URLElements pURL;
	private final URL_GAMEOFTHRONESElements pURL_GAMEOFTHRONES;
	private final URL_DOCTORWHOElements pURL_DOCTORWHO;
	private final URL_ORIGINALElements pURL_ORIGINAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SetGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPACK = new PACKElements();
		this.pPACKTYPE = new PACKTYPEElements();
		this.pFORMS = new FORMSElements();
		this.pFORM_GAMEOFTHRONES = new FORM_GAMEOFTHRONESElements();
		this.pFORM_ORIGINAL = new FORM_ORIGINALElements();
		this.pFORM_DOCTORWHO = new FORM_DOCTORWHOElements();
		this.pURL = new URLElements();
		this.pURL_GAMEOFTHRONES = new URL_GAMEOFTHRONESElements();
		this.pURL_DOCTORWHO = new URL_DOCTORWHOElements();
		this.pURL_ORIGINAL = new URL_ORIGINALElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.de.htwg.Set".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PACK:
	//	pack=PACKTYPE;
	public PACKElements getPACKAccess() {
		return pPACK;
	}
	
	public ParserRule getPACKRule() {
		return getPACKAccess().getRule();
	}
	
	//PACKTYPE:
	//	forms=FORMS & url=URL;
	public PACKTYPEElements getPACKTYPEAccess() {
		return pPACKTYPE;
	}
	
	public ParserRule getPACKTYPERule() {
		return getPACKTYPEAccess().getRule();
	}
	
	//FORMS:
	//	FORM_ORIGINAL | FORM_DOCTORWHO | FORM_GAMEOFTHRONES;
	public FORMSElements getFORMSAccess() {
		return pFORMS;
	}
	
	public ParserRule getFORMSRule() {
		return getFORMSAccess().getRule();
	}
	
	//FORM_GAMEOFTHRONES:
	//	"{ \"stark\", \"lennister\", \"targaryen\" };";
	public FORM_GAMEOFTHRONESElements getFORM_GAMEOFTHRONESAccess() {
		return pFORM_GAMEOFTHRONES;
	}
	
	public ParserRule getFORM_GAMEOFTHRONESRule() {
		return getFORM_GAMEOFTHRONESAccess().getRule();
	}
	
	//FORM_ORIGINAL:
	//	"{ \"ovally\", \"wave\", \"balk\" };";
	public FORM_ORIGINALElements getFORM_ORIGINALAccess() {
		return pFORM_ORIGINAL;
	}
	
	public ParserRule getFORM_ORIGINALRule() {
		return getFORM_ORIGINALAccess().getRule();
	}
	
	//FORM_DOCTORWHO:
	//	"{ \"tardis\", \"dalek\", \"cyberman\" };";
	public FORM_DOCTORWHOElements getFORM_DOCTORWHOAccess() {
		return pFORM_DOCTORWHO;
	}
	
	public ParserRule getFORM_DOCTORWHORule() {
		return getFORM_DOCTORWHOAccess().getRule();
	}
	
	//URL:
	//	URL_ORIGINAL | URL_DOCTORWHO | URL_GAMEOFTHRONES;
	public URLElements getURLAccess() {
		return pURL;
	}
	
	public ParserRule getURLRule() {
		return getURLAccess().getRule();
	}
	
	//URL_GAMEOFTHRONES:
	//	"/pack/got/";
	public URL_GAMEOFTHRONESElements getURL_GAMEOFTHRONESAccess() {
		return pURL_GAMEOFTHRONES;
	}
	
	public ParserRule getURL_GAMEOFTHRONESRule() {
		return getURL_GAMEOFTHRONESAccess().getRule();
	}
	
	//URL_DOCTORWHO:
	//	"/pack/dw/";
	public URL_DOCTORWHOElements getURL_DOCTORWHOAccess() {
		return pURL_DOCTORWHO;
	}
	
	public ParserRule getURL_DOCTORWHORule() {
		return getURL_DOCTORWHOAccess().getRule();
	}
	
	//URL_ORIGINAL:
	//	"/pack/original/";
	public URL_ORIGINALElements getURL_ORIGINALAccess() {
		return pURL_ORIGINAL;
	}
	
	public ParserRule getURL_ORIGINALRule() {
		return getURL_ORIGINALAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
