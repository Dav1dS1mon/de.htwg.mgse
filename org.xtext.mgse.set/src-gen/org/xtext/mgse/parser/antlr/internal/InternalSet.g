/*
 * generated by Xtext 2.11.0
 */
grammar InternalSet;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.mgse.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.mgse.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.mgse.services.SetGrammarAccess;

}

@parser::members {

 	private SetGrammarAccess grammarAccess;

    public InternalSetParser(TokenStream input, SetGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "PACK";
   	}

   	@Override
   	protected SetGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePACK
entryRulePACK returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPACKRule()); }
	iv_rulePACK=rulePACK
	{ $current=$iv_rulePACK.current; }
	EOF;

// Rule PACK
rulePACK returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pack'
		{
			newLeafNode(otherlv_0, grammarAccess.getPACKAccess().getPackKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPACKAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPACKRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPACKAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPACKAccess().getTypePACKTYPEParserRuleCall_3_0());
				}
				lv_type_3_0=rulePACKTYPE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPACKRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.xtext.mgse.Set.PACKTYPE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getPACKAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRulePACKTYPE
entryRulePACKTYPE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPACKTYPERule()); }
	iv_rulePACKTYPE=rulePACKTYPE
	{ $current=$iv_rulePACKTYPE.current; }
	EOF;

// Rule PACKTYPE
rulePACKTYPE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPACKTYPEAccess().getFormsFORMSParserRuleCall_0_0());
				}
				lv_forms_0_0=ruleFORMS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPACKTYPERule());
					}
					set(
						$current,
						"forms",
						lv_forms_0_0,
						"org.xtext.mgse.Set.FORMS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPACKTYPEAccess().getUrlURLParserRuleCall_1_0());
				}
				lv_url_1_0=ruleURL
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPACKTYPERule());
					}
					set(
						$current,
						"url",
						lv_url_1_0,
						"org.xtext.mgse.Set.URL");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFORMS
entryRuleFORMS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFORMSRule()); }
	iv_ruleFORMS=ruleFORMS
	{ $current=$iv_ruleFORMS.current; }
	EOF;

// Rule FORMS
ruleFORMS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='FORM'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFORMSAccess().getNameFORMKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFORMSRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "FORM");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getFORMSAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFORMSAccess().getTypeTYPE_FORMSEnumRuleCall_2_0());
				}
				lv_type_2_0=ruleTYPE_FORMS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFORMSRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.mgse.Set.TYPE_FORMS");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleURL
entryRuleURL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getURLRule()); }
	iv_ruleURL=ruleURL
	{ $current=$iv_ruleURL.current; }
	EOF;

// Rule URL
ruleURL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='URL'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getURLAccess().getNameURLKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getURLRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "URL");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getURLAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getURLAccess().getTypeURL_TYPESEnumRuleCall_2_0());
				}
				lv_type_2_0=ruleURL_TYPES
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getURLRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.mgse.Set.URL_TYPES");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule TYPE_FORMS
ruleTYPE_FORMS returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='FORM_ORIGINAL'
			{
				$current = grammarAccess.getTYPE_FORMSAccess().getFORM_ORIGINALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTYPE_FORMSAccess().getFORM_ORIGINALEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='FORM_DOCTORWHO'
			{
				$current = grammarAccess.getTYPE_FORMSAccess().getFORM_DOCTORWHOEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTYPE_FORMSAccess().getFORM_DOCTORWHOEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='FORM_GAMEOFTHRONES'
			{
				$current = grammarAccess.getTYPE_FORMSAccess().getFORM_GAMEOFTHRONESEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTYPE_FORMSAccess().getFORM_GAMEOFTHRONESEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule URL_TYPES
ruleURL_TYPES returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='URL_ORIGINAL'
			{
				$current = grammarAccess.getURL_TYPESAccess().getURL_ORIGINALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getURL_TYPESAccess().getURL_ORIGINALEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='URL_DOCTORWHO'
			{
				$current = grammarAccess.getURL_TYPESAccess().getURL_DOCTORWHOEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getURL_TYPESAccess().getURL_DOCTORWHOEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='URL_GAMEOFTHRONES'
			{
				$current = grammarAccess.getURL_TYPESAccess().getURL_GAMEOFTHRONESEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getURL_TYPESAccess().getURL_GAMEOFTHRONESEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
