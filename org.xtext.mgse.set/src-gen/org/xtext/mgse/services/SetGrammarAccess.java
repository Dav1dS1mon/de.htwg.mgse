/*
 * generated by Xtext 2.11.0
 */
package org.xtext.mgse.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SetGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PACKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mgse.Set.PACK");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypePACKTYPEParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PACK:
		//	'pack' name=ID '{' type=PACKTYPE
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'pack' name=ID '{' type=PACKTYPE '}'
		public Group getGroup() { return cGroup; }
		
		//'pack'
		public Keyword getPackKeyword_0() { return cPackKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//type=PACKTYPE
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//PACKTYPE
		public RuleCall getTypePACKTYPEParserRuleCall_3_0() { return cTypePACKTYPEParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PACKTYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mgse.Set.PACKTYPE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFormsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFormsFORMSParserRuleCall_0_0 = (RuleCall)cFormsAssignment_0.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlURLParserRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		
		//PACKTYPE:
		//	forms=FORMS url=URL;
		@Override public ParserRule getRule() { return rule; }
		
		//forms=FORMS url=URL
		public Group getGroup() { return cGroup; }
		
		//forms=FORMS
		public Assignment getFormsAssignment_0() { return cFormsAssignment_0; }
		
		//FORMS
		public RuleCall getFormsFORMSParserRuleCall_0_0() { return cFormsFORMSParserRuleCall_0_0; }
		
		//url=URL
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }
		
		//URL
		public RuleCall getUrlURLParserRuleCall_1_0() { return cUrlURLParserRuleCall_1_0; }
	}
	public class FORMSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mgse.Set.FORMS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameFORMKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTYPE_FORMSEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//FORMS:
		//	name='FORM' '=' type=TYPE_FORMS;
		@Override public ParserRule getRule() { return rule; }
		
		//name='FORM' '=' type=TYPE_FORMS
		public Group getGroup() { return cGroup; }
		
		//name='FORM'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'FORM'
		public Keyword getNameFORMKeyword_0_0() { return cNameFORMKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//type=TYPE_FORMS
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TYPE_FORMS
		public RuleCall getTypeTYPE_FORMSEnumRuleCall_2_0() { return cTypeTYPE_FORMSEnumRuleCall_2_0; }
	}
	public class URLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mgse.Set.URL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameURLKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeURL_TYPESEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//URL:
		//	name='URL' '=' type=URL_TYPES;
		@Override public ParserRule getRule() { return rule; }
		
		//name='URL' '=' type=URL_TYPES
		public Group getGroup() { return cGroup; }
		
		//name='URL'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'URL'
		public Keyword getNameURLKeyword_0_0() { return cNameURLKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//type=URL_TYPES
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//URL_TYPES
		public RuleCall getTypeURL_TYPESEnumRuleCall_2_0() { return cTypeURL_TYPESEnumRuleCall_2_0; }
	}
	
	public class TYPE_FORMSElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mgse.Set.TYPE_FORMS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFORM_ORIGINALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFORM_ORIGINALFORM_ORIGINALKeyword_0_0 = (Keyword)cFORM_ORIGINALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFORM_DOCTORWHOEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFORM_DOCTORWHOFORM_DOCTORWHOKeyword_1_0 = (Keyword)cFORM_DOCTORWHOEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFORM_GAMEOFTHRONESEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFORM_GAMEOFTHRONESFORM_GAMEOFTHRONESKeyword_2_0 = (Keyword)cFORM_GAMEOFTHRONESEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TYPE_FORMS:
		//	FORM_ORIGINAL | FORM_DOCTORWHO | FORM_GAMEOFTHRONES;
		public EnumRule getRule() { return rule; }
		
		//FORM_ORIGINAL | FORM_DOCTORWHO | FORM_GAMEOFTHRONES
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FORM_ORIGINAL
		public EnumLiteralDeclaration getFORM_ORIGINALEnumLiteralDeclaration_0() { return cFORM_ORIGINALEnumLiteralDeclaration_0; }
		
		//"FORM_ORIGINAL"
		public Keyword getFORM_ORIGINALFORM_ORIGINALKeyword_0_0() { return cFORM_ORIGINALFORM_ORIGINALKeyword_0_0; }
		
		//FORM_DOCTORWHO
		public EnumLiteralDeclaration getFORM_DOCTORWHOEnumLiteralDeclaration_1() { return cFORM_DOCTORWHOEnumLiteralDeclaration_1; }
		
		//"FORM_DOCTORWHO"
		public Keyword getFORM_DOCTORWHOFORM_DOCTORWHOKeyword_1_0() { return cFORM_DOCTORWHOFORM_DOCTORWHOKeyword_1_0; }
		
		//FORM_GAMEOFTHRONES
		public EnumLiteralDeclaration getFORM_GAMEOFTHRONESEnumLiteralDeclaration_2() { return cFORM_GAMEOFTHRONESEnumLiteralDeclaration_2; }
		
		//"FORM_GAMEOFTHRONES"
		public Keyword getFORM_GAMEOFTHRONESFORM_GAMEOFTHRONESKeyword_2_0() { return cFORM_GAMEOFTHRONESFORM_GAMEOFTHRONESKeyword_2_0; }
	}
	public class URL_TYPESElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mgse.Set.URL_TYPES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cURL_ORIGINALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cURL_ORIGINALURL_ORIGINALKeyword_0_0 = (Keyword)cURL_ORIGINALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cURL_DOCTORWHOEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cURL_DOCTORWHOURL_DOCTORWHOKeyword_1_0 = (Keyword)cURL_DOCTORWHOEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cURL_GAMEOFTHRONESEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cURL_GAMEOFTHRONESURL_GAMEOFTHRONESKeyword_2_0 = (Keyword)cURL_GAMEOFTHRONESEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum URL_TYPES:
		//	URL_ORIGINAL | URL_DOCTORWHO | URL_GAMEOFTHRONES;
		public EnumRule getRule() { return rule; }
		
		//URL_ORIGINAL | URL_DOCTORWHO | URL_GAMEOFTHRONES
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//URL_ORIGINAL
		public EnumLiteralDeclaration getURL_ORIGINALEnumLiteralDeclaration_0() { return cURL_ORIGINALEnumLiteralDeclaration_0; }
		
		//"URL_ORIGINAL"
		public Keyword getURL_ORIGINALURL_ORIGINALKeyword_0_0() { return cURL_ORIGINALURL_ORIGINALKeyword_0_0; }
		
		//URL_DOCTORWHO
		public EnumLiteralDeclaration getURL_DOCTORWHOEnumLiteralDeclaration_1() { return cURL_DOCTORWHOEnumLiteralDeclaration_1; }
		
		//"URL_DOCTORWHO"
		public Keyword getURL_DOCTORWHOURL_DOCTORWHOKeyword_1_0() { return cURL_DOCTORWHOURL_DOCTORWHOKeyword_1_0; }
		
		//URL_GAMEOFTHRONES
		public EnumLiteralDeclaration getURL_GAMEOFTHRONESEnumLiteralDeclaration_2() { return cURL_GAMEOFTHRONESEnumLiteralDeclaration_2; }
		
		//"URL_GAMEOFTHRONES"
		public Keyword getURL_GAMEOFTHRONESURL_GAMEOFTHRONESKeyword_2_0() { return cURL_GAMEOFTHRONESURL_GAMEOFTHRONESKeyword_2_0; }
	}
	
	private final PACKElements pPACK;
	private final PACKTYPEElements pPACKTYPE;
	private final FORMSElements pFORMS;
	private final TYPE_FORMSElements eTYPE_FORMS;
	private final URLElements pURL;
	private final URL_TYPESElements eURL_TYPES;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SetGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPACK = new PACKElements();
		this.pPACKTYPE = new PACKTYPEElements();
		this.pFORMS = new FORMSElements();
		this.eTYPE_FORMS = new TYPE_FORMSElements();
		this.pURL = new URLElements();
		this.eURL_TYPES = new URL_TYPESElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.mgse.Set".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PACK:
	//	'pack' name=ID '{' type=PACKTYPE
	//	'}';
	public PACKElements getPACKAccess() {
		return pPACK;
	}
	
	public ParserRule getPACKRule() {
		return getPACKAccess().getRule();
	}
	
	//PACKTYPE:
	//	forms=FORMS url=URL;
	public PACKTYPEElements getPACKTYPEAccess() {
		return pPACKTYPE;
	}
	
	public ParserRule getPACKTYPERule() {
		return getPACKTYPEAccess().getRule();
	}
	
	//FORMS:
	//	name='FORM' '=' type=TYPE_FORMS;
	public FORMSElements getFORMSAccess() {
		return pFORMS;
	}
	
	public ParserRule getFORMSRule() {
		return getFORMSAccess().getRule();
	}
	
	//enum TYPE_FORMS:
	//	FORM_ORIGINAL | FORM_DOCTORWHO | FORM_GAMEOFTHRONES;
	public TYPE_FORMSElements getTYPE_FORMSAccess() {
		return eTYPE_FORMS;
	}
	
	public EnumRule getTYPE_FORMSRule() {
		return getTYPE_FORMSAccess().getRule();
	}
	
	//URL:
	//	name='URL' '=' type=URL_TYPES;
	public URLElements getURLAccess() {
		return pURL;
	}
	
	public ParserRule getURLRule() {
		return getURLAccess().getRule();
	}
	
	//enum URL_TYPES:
	//	URL_ORIGINAL | URL_DOCTORWHO | URL_GAMEOFTHRONES;
	public URL_TYPESElements getURL_TYPESAccess() {
		return eURL_TYPES;
	}
	
	public EnumRule getURL_TYPESRule() {
		return getURL_TYPESAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
