/*
 * generated by Xtext 2.11.0
 */
grammar InternalSet;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.de.htwg.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.de.htwg.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.de.htwg.services.SetGrammarAccess;

}
@parser::members {
	private SetGrammarAccess grammarAccess;

	public void setGrammarAccess(SetGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRulePACK
entryRulePACK
:
{ before(grammarAccess.getPACKRule()); }
	 rulePACK
{ after(grammarAccess.getPACKRule()); } 
	 EOF 
;

// Rule PACK
rulePACK 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPACKAccess().getPackAssignment()); }
		(rule__PACK__PackAssignment)
		{ after(grammarAccess.getPACKAccess().getPackAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePACKTYPE
entryRulePACKTYPE
:
{ before(grammarAccess.getPACKTYPERule()); }
	 rulePACKTYPE
{ after(grammarAccess.getPACKTYPERule()); } 
	 EOF 
;

// Rule PACKTYPE
rulePACKTYPE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPACKTYPEAccess().getUnorderedGroup()); }
		(rule__PACKTYPE__UnorderedGroup)
		{ after(grammarAccess.getPACKTYPEAccess().getUnorderedGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFORMS
entryRuleFORMS
:
{ before(grammarAccess.getFORMSRule()); }
	 ruleFORMS
{ after(grammarAccess.getFORMSRule()); } 
	 EOF 
;

// Rule FORMS
ruleFORMS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFORMSAccess().getAlternatives()); }
		(rule__FORMS__Alternatives)
		{ after(grammarAccess.getFORMSAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFORM_GAMEOFTHRONES
entryRuleFORM_GAMEOFTHRONES
:
{ before(grammarAccess.getFORM_GAMEOFTHRONESRule()); }
	 ruleFORM_GAMEOFTHRONES
{ after(grammarAccess.getFORM_GAMEOFTHRONESRule()); } 
	 EOF 
;

// Rule FORM_GAMEOFTHRONES
ruleFORM_GAMEOFTHRONES 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFORM_GAMEOFTHRONESAccess().getStarkLennisterTargaryenKeyword()); }
		'{ "stark", "lennister", "targaryen" };'
		{ after(grammarAccess.getFORM_GAMEOFTHRONESAccess().getStarkLennisterTargaryenKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFORM_ORIGINAL
entryRuleFORM_ORIGINAL
:
{ before(grammarAccess.getFORM_ORIGINALRule()); }
	 ruleFORM_ORIGINAL
{ after(grammarAccess.getFORM_ORIGINALRule()); } 
	 EOF 
;

// Rule FORM_ORIGINAL
ruleFORM_ORIGINAL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFORM_ORIGINALAccess().getOvallyWaveBalkKeyword()); }
		'{ "ovally", "wave", "balk" };'
		{ after(grammarAccess.getFORM_ORIGINALAccess().getOvallyWaveBalkKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFORM_DOCTORWHO
entryRuleFORM_DOCTORWHO
:
{ before(grammarAccess.getFORM_DOCTORWHORule()); }
	 ruleFORM_DOCTORWHO
{ after(grammarAccess.getFORM_DOCTORWHORule()); } 
	 EOF 
;

// Rule FORM_DOCTORWHO
ruleFORM_DOCTORWHO 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFORM_DOCTORWHOAccess().getTardisDalekCybermanKeyword()); }
		'{ "tardis", "dalek", "cyberman" };'
		{ after(grammarAccess.getFORM_DOCTORWHOAccess().getTardisDalekCybermanKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleURL
entryRuleURL
:
{ before(grammarAccess.getURLRule()); }
	 ruleURL
{ after(grammarAccess.getURLRule()); } 
	 EOF 
;

// Rule URL
ruleURL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getURLAccess().getAlternatives()); }
		(rule__URL__Alternatives)
		{ after(grammarAccess.getURLAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleURL_GAMEOFTHRONES
entryRuleURL_GAMEOFTHRONES
:
{ before(grammarAccess.getURL_GAMEOFTHRONESRule()); }
	 ruleURL_GAMEOFTHRONES
{ after(grammarAccess.getURL_GAMEOFTHRONESRule()); } 
	 EOF 
;

// Rule URL_GAMEOFTHRONES
ruleURL_GAMEOFTHRONES 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getURL_GAMEOFTHRONESAccess().getPackGotKeyword()); }
		'/pack/got/'
		{ after(grammarAccess.getURL_GAMEOFTHRONESAccess().getPackGotKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleURL_DOCTORWHO
entryRuleURL_DOCTORWHO
:
{ before(grammarAccess.getURL_DOCTORWHORule()); }
	 ruleURL_DOCTORWHO
{ after(grammarAccess.getURL_DOCTORWHORule()); } 
	 EOF 
;

// Rule URL_DOCTORWHO
ruleURL_DOCTORWHO 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getURL_DOCTORWHOAccess().getPackDwKeyword()); }
		'/pack/dw/'
		{ after(grammarAccess.getURL_DOCTORWHOAccess().getPackDwKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleURL_ORIGINAL
entryRuleURL_ORIGINAL
:
{ before(grammarAccess.getURL_ORIGINALRule()); }
	 ruleURL_ORIGINAL
{ after(grammarAccess.getURL_ORIGINALRule()); } 
	 EOF 
;

// Rule URL_ORIGINAL
ruleURL_ORIGINAL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getURL_ORIGINALAccess().getPackOriginalKeyword()); }
		'/pack/original/'
		{ after(grammarAccess.getURL_ORIGINALAccess().getPackOriginalKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FORMS__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFORMSAccess().getFORM_ORIGINALParserRuleCall_0()); }
		ruleFORM_ORIGINAL
		{ after(grammarAccess.getFORMSAccess().getFORM_ORIGINALParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFORMSAccess().getFORM_DOCTORWHOParserRuleCall_1()); }
		ruleFORM_DOCTORWHO
		{ after(grammarAccess.getFORMSAccess().getFORM_DOCTORWHOParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getFORMSAccess().getFORM_GAMEOFTHRONESParserRuleCall_2()); }
		ruleFORM_GAMEOFTHRONES
		{ after(grammarAccess.getFORMSAccess().getFORM_GAMEOFTHRONESParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__URL__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getURLAccess().getURL_ORIGINALParserRuleCall_0()); }
		ruleURL_ORIGINAL
		{ after(grammarAccess.getURLAccess().getURL_ORIGINALParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getURLAccess().getURL_DOCTORWHOParserRuleCall_1()); }
		ruleURL_DOCTORWHO
		{ after(grammarAccess.getURLAccess().getURL_DOCTORWHOParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getURLAccess().getURL_GAMEOFTHRONESParserRuleCall_2()); }
		ruleURL_GAMEOFTHRONES
		{ after(grammarAccess.getURLAccess().getURL_GAMEOFTHRONESParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PACKTYPE__UnorderedGroup
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getPACKTYPEAccess().getUnorderedGroup());
	}
:
	rule__PACKTYPE__UnorderedGroup__0
	{getUnorderedGroupHelper().canLeave(grammarAccess.getPACKTYPEAccess().getUnorderedGroup())}?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getPACKTYPEAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__PACKTYPE__UnorderedGroup__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getPACKTYPEAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getPACKTYPEAccess().getUnorderedGroup(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getPACKTYPEAccess().getFormsAssignment_0()); }
					(rule__PACKTYPE__FormsAssignment_0)
					{ after(grammarAccess.getPACKTYPEAccess().getFormsAssignment_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getPACKTYPEAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getPACKTYPEAccess().getUnorderedGroup(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getPACKTYPEAccess().getUrlAssignment_1()); }
					(rule__PACKTYPE__UrlAssignment_1)
					{ after(grammarAccess.getPACKTYPEAccess().getUrlAssignment_1()); }
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPACKTYPEAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__PACKTYPE__UnorderedGroup__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PACKTYPE__UnorderedGroup__Impl
	rule__PACKTYPE__UnorderedGroup__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__PACKTYPE__UnorderedGroup__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PACKTYPE__UnorderedGroup__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__PACK__PackAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPACKAccess().getPackPACKTYPEParserRuleCall_0()); }
		rulePACKTYPE
		{ after(grammarAccess.getPACKAccess().getPackPACKTYPEParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PACKTYPE__FormsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPACKTYPEAccess().getFormsFORMSParserRuleCall_0_0()); }
		ruleFORMS
		{ after(grammarAccess.getPACKTYPEAccess().getFormsFORMSParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PACKTYPE__UrlAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPACKTYPEAccess().getUrlURLParserRuleCall_1_0()); }
		ruleURL
		{ after(grammarAccess.getPACKTYPEAccess().getUrlURLParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
