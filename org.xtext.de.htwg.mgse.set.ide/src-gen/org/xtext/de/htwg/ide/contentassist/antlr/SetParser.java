/*
 * generated by Xtext 2.11.0
 */
package org.xtext.de.htwg.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.de.htwg.ide.contentassist.antlr.internal.InternalSetParser;
import org.xtext.de.htwg.services.SetGrammarAccess;

public class SetParser extends AbstractContentAssistParser {

	@Inject
	private SetGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSetParser createParser() {
		InternalSetParser result = new InternalSetParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFORMSAccess().getAlternatives(), "rule__FORMS__Alternatives");
					put(grammarAccess.getURLAccess().getAlternatives(), "rule__URL__Alternatives");
					put(grammarAccess.getPACKAccess().getPackAssignment(), "rule__PACK__PackAssignment");
					put(grammarAccess.getPACKTYPEAccess().getFormsAssignment_0(), "rule__PACKTYPE__FormsAssignment_0");
					put(grammarAccess.getPACKTYPEAccess().getUrlAssignment_1(), "rule__PACKTYPE__UrlAssignment_1");
					put(grammarAccess.getPACKTYPEAccess().getUnorderedGroup(), "rule__PACKTYPE__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SetGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SetGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
